// Generated by gencpp from file utils/Sign.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_SIGN_H
#define UTILS_MESSAGE_SIGN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace utils
{
template <class ContainerAllocator>
struct Sign_
{
  typedef Sign_<ContainerAllocator> Type;

  Sign_()
    : header()
    , objects()
    , box1()
    , box2()
    , box3()
    , box4()
    , num(0)
    , confidence()  {
    }
  Sign_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , objects(_alloc)
    , box1(_alloc)
    , box2(_alloc)
    , box3(_alloc)
    , box4(_alloc)
    , num(0)
    , confidence(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _objects_type;
  _objects_type objects;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _box1_type;
  _box1_type box1;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _box2_type;
  _box2_type box2;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _box3_type;
  _box3_type box3;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _box4_type;
  _box4_type box4;

   typedef int32_t _num_type;
  _num_type num;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::utils::Sign_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::Sign_<ContainerAllocator> const> ConstPtr;

}; // struct Sign_

typedef ::utils::Sign_<std::allocator<void> > Sign;

typedef boost::shared_ptr< ::utils::Sign > SignPtr;
typedef boost::shared_ptr< ::utils::Sign const> SignConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::Sign_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::Sign_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::Sign_<ContainerAllocator1> & lhs, const ::utils::Sign_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.objects == rhs.objects &&
    lhs.box1 == rhs.box1 &&
    lhs.box2 == rhs.box2 &&
    lhs.box3 == rhs.box3 &&
    lhs.box4 == rhs.box4 &&
    lhs.num == rhs.num &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::Sign_<ContainerAllocator1> & lhs, const ::utils::Sign_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::utils::Sign_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::Sign_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::Sign_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::Sign_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::Sign_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::Sign_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::Sign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b9c82d37a6d896a910746afbdbd99b7a";
  }

  static const char* value(const ::utils::Sign_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb9c82d37a6d896a9ULL;
  static const uint64_t static_value2 = 0x10746afbdbd99b7aULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::Sign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/Sign";
  }

  static const char* value(const ::utils::Sign_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::Sign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"int32[] objects\n"
"float32[] box1\n"
"float32[] box2\n"
"float32[] box3\n"
"float32[] box4\n"
"int32 num\n"
"float32[] confidence\n"
"# int32 obj1\n"
"# float32 left1\n"
"# float32 top1\n"
"# float32 width1\n"
"# float32 height1\n"
"\n"
"# int32 obj2\n"
"# float32 left2\n"
"# float32 top2\n"
"# float32 width2\n"
"# float32 height2\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::utils::Sign_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::Sign_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.objects);
      stream.next(m.box1);
      stream.next(m.box2);
      stream.next(m.box3);
      stream.next(m.box4);
      stream.next(m.num);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sign_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::Sign_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::Sign_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.objects[i]);
    }
    s << indent << "box1[]" << std::endl;
    for (size_t i = 0; i < v.box1.size(); ++i)
    {
      s << indent << "  box1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.box1[i]);
    }
    s << indent << "box2[]" << std::endl;
    for (size_t i = 0; i < v.box2.size(); ++i)
    {
      s << indent << "  box2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.box2[i]);
    }
    s << indent << "box3[]" << std::endl;
    for (size_t i = 0; i < v.box3.size(); ++i)
    {
      s << indent << "  box3[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.box3[i]);
    }
    s << indent << "box4[]" << std::endl;
    for (size_t i = 0; i < v.box4.size(); ++i)
    {
      s << indent << "  box4[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.box4[i]);
    }
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
    s << indent << "confidence[]" << std::endl;
    for (size_t i = 0; i < v.confidence.size(); ++i)
    {
      s << indent << "  confidence[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.confidence[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_SIGN_H

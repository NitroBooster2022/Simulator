// Generated by gencpp from file utils/ImgInfo.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_IMGINFO_H
#define UTILS_MESSAGE_IMGINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace utils
{
template <class ContainerAllocator>
struct ImgInfo_
{
  typedef ImgInfo_<ContainerAllocator> Type;

  ImgInfo_()
    : colorImg()
    , depImg()  {
    }
  ImgInfo_(const ContainerAllocator& _alloc)
    : colorImg(_alloc)
    , depImg(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _colorImg_type;
  _colorImg_type colorImg;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _depImg_type;
  _depImg_type depImg;





  typedef boost::shared_ptr< ::utils::ImgInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::ImgInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ImgInfo_

typedef ::utils::ImgInfo_<std::allocator<void> > ImgInfo;

typedef boost::shared_ptr< ::utils::ImgInfo > ImgInfoPtr;
typedef boost::shared_ptr< ::utils::ImgInfo const> ImgInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::ImgInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::ImgInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::ImgInfo_<ContainerAllocator1> & lhs, const ::utils::ImgInfo_<ContainerAllocator2> & rhs)
{
  return lhs.colorImg == rhs.colorImg &&
    lhs.depImg == rhs.depImg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::ImgInfo_<ContainerAllocator1> & lhs, const ::utils::ImgInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::utils::ImgInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::ImgInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::ImgInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::ImgInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::ImgInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::ImgInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::ImgInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40615b7689d240b97498f576ebe96a97";
  }

  static const char* value(const ::utils::ImgInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40615b7689d240b9ULL;
  static const uint64_t static_value2 = 0x7498f576ebe96a97ULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::ImgInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/ImgInfo";
  }

  static const char* value(const ::utils::ImgInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::ImgInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32[] colorImg\n"
"uint32[] depImg\n"
;
  }

  static const char* value(const ::utils::ImgInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::ImgInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.colorImg);
      stream.next(m.depImg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImgInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::ImgInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::ImgInfo_<ContainerAllocator>& v)
  {
    s << indent << "colorImg[]" << std::endl;
    for (size_t i = 0; i < v.colorImg.size(); ++i)
    {
      s << indent << "  colorImg[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.colorImg[i]);
    }
    s << indent << "depImg[]" << std::endl;
    for (size_t i = 0; i < v.depImg.size(); ++i)
    {
      s << indent << "  depImg[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.depImg[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_IMGINFO_H
